<cline-context>
    <rules>
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package.  We use
            a setup.py file to implement this standard.  We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.  In particular
            use pyproject.toml rather than setup.py.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major change. Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule>DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic".</rule>
        <rule>Don't let files exceed 100 lines. Break them into modules when they reach this point.</rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly. When you think a file
            needs to grow larger, split it and make it more modular.</rule>
        <rule>Inline comments are almost always bad and a code smell. Good code should
            explain itself.</rule>
        <rule>No try-excepts. Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
        <rule>NEVER touch css unless I've EXPLICITLY instructed you to work on
        app styling.</rule>
        <rule>When working with CSS, use variables for shared values across components, 
        particularly for colors. Avoid haphazard use of hard-coded values.</rule>
        <rule>Always use the most recent possible version of node and python libraries.
        Specify versions only when absolutely necessary, as seldom as possible.</rule>
    </rules>

    <long-term-memory>
    </long-term-memory>
    
    <current-task>
    </current-task>
</cline-context>
